// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  email            String        @unique
  username         String
  password         String
  bio              String?
  gender           String?
  registrationDate DateTime
  coins            Int
  stones           Int
  location         String?
  profilePicture   String?
  coverPicture     String?
  Novel            Novel[]
  ReadingList      ReadingList[]
  Comment          Comment[]
  Like             Like[]
}

model Novel {
  id                    Int                     @id @default(autoincrement())
  author                User                    @relation(fields: [userId], references: [id])
  userId                Int
  title                 String
  type                  String
  synopsis              String?                 @db.LongText
  tags                  Json?
  abbrevation           String?                 @db.VarChar(15)
  warning               String?
  status                String?
  length                String?
  cover                 String?
  views                 Int
  customOrdering        Boolean                 @default(false)
  genre                 Genre                   @relation(fields: [genreId], references: [id])
  genreId               Int
  Chapter               Chapter[]
  ReadingListEntries    ReadingListEntries[]
  Review                Review[]
  NovelStone            NovelStone[]
  NovelView             NovelView[]
  ChapterView           ChapterView[]
  CustomChapterOrdering CustomChapterOrdering[]
}

model Chapter {
  id            Int           @id @default(autoincrement())
  novel         Novel         @relation(fields: [novelId], references: [id])
  novelId       Int
  title         String
  date          DateTime
  content       String?       @db.LongText
  status        String
  chapterNumber Int
  Comment       Comment[]
  ChapterView   ChapterView[]
}

model ReadingList {
  id                 Int                  @id @default(autoincrement())
  user               User                 @relation(fields: [userId], references: [id])
  userId             Int
  ReadingListEntries ReadingListEntries[]
}

model ReadingListEntries {
  id            Int         @id @default(autoincrement())
  readingList   ReadingList @relation(fields: [readingListId], references: [id])
  readingListId Int
  novel         Novel       @relation(fields: [novelId], references: [id])
  novelId       Int
  progress      Int
  added         DateTime
}

model Review {
  id       Int       @id @default(autoincrement())
  novel    Novel     @relation(fields: [novelId], references: [id])
  novelId  Int
  rating   Int
  review   String
  spoiler  Boolean
  pin      Boolean
  Comment  Comment[]
  postedAt DateTime
  Like     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId Int?
  review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  Int?
  user      User     @relation(fields: [userId], references: [id])
  comment   String
  userId    Int
  postedAt  DateTime
  Like      Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  Int?
}

model NovelStone {
  id          Int      @id @default(autoincrement())
  novel       Novel    @relation(fields: [novelId], references: [id])
  novelId     Int
  periodStart DateTime
  periodEnd   DateTime
  stones      Int
}

model NovelView {
  id        Int      @id @default(autoincrement())
  novel     Novel    @relation(fields: [novelId], references: [id])
  novelId   Int
  viewDate  DateTime
  viewCount Int
}

model ChapterView {
  id        Int      @id @default(autoincrement())
  novel     Novel    @relation(fields: [novelId], references: [id])
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId Int
  novelId   Int
  viewDate  DateTime
  viewCount Int
}

model CustomChapterOrdering {
  id      Int   @id @default(autoincrement())
  novel   Novel @relation(fields: [novelId], references: [id])
  novelId Int
  order   Json
}

model Genre {
  id    Int     @id @default(autoincrement())
  name  String
  type  String
  Novel Novel[]
}
